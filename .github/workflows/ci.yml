name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - "release/**"
  workflow_call:

# Skip CI if auto-release will run (avoid duplicate runs)
# Only cancel for PRs, not for main branch pushes which should complete as "skipped"
concurrency:
  group: ci-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # Skip standalone CI for main branch pushes when auto-release will handle it
  check-skip:
    name: Check if CI should run
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Determine if CI should run
        id: check
        run: |
          # Skip CI on main branch pushes (auto-release will handle it)
          # Always run CI for PRs and other branches
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "::notice::Skipping standalone CI - auto-release workflow will handle testing"
            echo "This is expected behavior for main branch pushes."
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "Running CI for ${{ github.event_name }} on ${{ github.ref }}"
          fi

  ci-skip-message:
    name: CI Skipped - Auto-release will handle testing
    needs: check-skip
    if: needs.check-skip.outputs.should-run == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Skip message
        run: |
          echo "## ✅ CI Workflow Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "CI was skipped for this main branch push because the auto-release workflow will handle testing." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This is expected behavior and indicates the workflow is working correctly." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Testing will run as part of the auto-release workflow." >> $GITHUB_STEP_SUMMARY

  test:
    name: CI Test on ${{ matrix.os }} with Node ${{ matrix.node }}
    needs: check-skip
    if: needs.check-skip.outputs.should-run == 'true' || github.event_name == 'workflow_call'
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        node: ["22.x"]
        include:
          - os: ubuntu-latest
            os_name: Linux
          - os: windows-latest
            os_name: Windows

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check types
        run: npm run check-types

      - name: Lint code
        run: npm run lint

      - name: Build extension
        run: npm run compile
        env:
          APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}

      - name: Run unit tests (Linux)
        if: runner.os == 'Linux'
        run: xvfb-run -a npm test
        env:
          CI: true

      - name: Run unit tests (Windows)
        if: runner.os != 'Linux'
        run: npm test
        env:
          CI: true

      - name: Package extension
        run: npm run package
        env:
          APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os_name }}-node${{ matrix.node }}
          path: |
            test-results/
            coverage/
          retention-days: 7

      - name: Upload extension package
        if: matrix.os == 'ubuntu-latest' && matrix.node == '22.x'
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension-package
          path: "*.vsix"
          retention-days: 7

  test-summary:
    name: Test Summary
    needs: [check-skip, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.check-skip.outputs.should-run }}" == "false" ]]; then
            echo "✅ Tests skipped - handled by auto-release workflow" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This is expected for main branch pushes." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test.result }}" == "skipped" ]]; then
            echo "⏭️ Tests were skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "| OS | Node Version | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|---|" >> $GITHUB_STEP_SUMMARY

          # This is a placeholder - in a real scenario, you'd parse actual results
          echo "See individual job results above for details." >> $GITHUB_STEP_SUMMARY
